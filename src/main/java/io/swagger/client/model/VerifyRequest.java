/*
 * Transactional API
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * VerifyRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-25T18:20:46.782806+01:00[Europe/Lisbon]")
public class VerifyRequest {
  @SerializedName("senderId")
  private String senderId = null;

  @SerializedName("to")
  private String to = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("codeLength")
  private Integer codeLength = 6;

  @SerializedName("codeValidity")
  private Integer codeValidity = 600;

  /**
   * the format of the code. can be:  Format | Description | RegEx --- | --- | --- numeric | numbers | [0-9] alpha | letters | [A-Z] alphanumeric | numbers and letters | [0-9A-Z] hexa | numbers and letters up to F | [0-9A-F]
   */
  @JsonAdapter(CodeTypeEnum.Adapter.class)
  public enum CodeTypeEnum {
    NUMERIC("numeric"),
    ALPHA("alpha"),
    ALPHANUMERIC("alphanumeric"),
    HEXA("hexa");

    private String value;

    CodeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CodeTypeEnum fromValue(String text) {
      for (CodeTypeEnum b : CodeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CodeTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("codeType")
  private CodeTypeEnum codeType = CodeTypeEnum.NUMERIC;

  public VerifyRequest senderId(String senderId) {
    this.senderId = senderId;
    return this;
  }

   /**
   * The id of the sender.
   * @return senderId
  **/
  @Schema(example = "1234", required = true, description = "The id of the sender.")
  public String getSenderId() {
    return senderId;
  }

  public void setSenderId(String senderId) {
    this.senderId = senderId;
  }

  public VerifyRequest to(String to) {
    this.to = to;
    return this;
  }

   /**
   * The phone number of the recipient of the code. Format should be &#x60;countryCode&#x60;-&#x60;phoneNumber&#x60;
   * @return to
  **/
  @Schema(example = "351-987654321", required = true, description = "The phone number of the recipient of the code. Format should be `countryCode`-`phoneNumber`")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public VerifyRequest message(String message) {
    this.message = message;
    return this;
  }

   /**
   * the message that the user is going to receive. location of the code should be given by using the tag {{ code }}. All instances of {{ code }} will be replaced with a code that is in accordance with the settings. If the tag is not present, the code will be added at the end of the message.
   * @return message
  **/
  @Schema(example = "To authorize the operation please introduce the following code code: {{ code }}", description = "the message that the user is going to receive. location of the code should be given by using the tag {{ code }}. All instances of {{ code }} will be replaced with a code that is in accordance with the settings. If the tag is not present, the code will be added at the end of the message.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public VerifyRequest codeLength(Integer codeLength) {
    this.codeLength = codeLength;
    return this;
  }

   /**
   * the length of the code in characters. Maximum is 20 characters. Default is 6 characters.
   * @return codeLength
  **/
  @Schema(example = "6", description = "the length of the code in characters. Maximum is 20 characters. Default is 6 characters.")
  public Integer getCodeLength() {
    return codeLength;
  }

  public void setCodeLength(Integer codeLength) {
    this.codeLength = codeLength;
  }

  public VerifyRequest codeValidity(Integer codeValidity) {
    this.codeValidity = codeValidity;
    return this;
  }

   /**
   * the period of time the code is valid after the message has been sent, in seconds. Defaults to 600 seconds (10 min). Maximum validity is 3600 seconds (1 hour).
   * @return codeValidity
  **/
  @Schema(example = "600", description = "the period of time the code is valid after the message has been sent, in seconds. Defaults to 600 seconds (10 min). Maximum validity is 3600 seconds (1 hour).")
  public Integer getCodeValidity() {
    return codeValidity;
  }

  public void setCodeValidity(Integer codeValidity) {
    this.codeValidity = codeValidity;
  }

  public VerifyRequest codeType(CodeTypeEnum codeType) {
    this.codeType = codeType;
    return this;
  }

   /**
   * the format of the code. can be:  Format | Description | RegEx --- | --- | --- numeric | numbers | [0-9] alpha | letters | [A-Z] alphanumeric | numbers and letters | [0-9A-Z] hexa | numbers and letters up to F | [0-9A-F]
   * @return codeType
  **/
  @Schema(example = "numeric", description = "the format of the code. can be:  Format | Description | RegEx --- | --- | --- numeric | numbers | [0-9] alpha | letters | [A-Z] alphanumeric | numbers and letters | [0-9A-Z] hexa | numbers and letters up to F | [0-9A-F]")
  public CodeTypeEnum getCodeType() {
    return codeType;
  }

  public void setCodeType(CodeTypeEnum codeType) {
    this.codeType = codeType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyRequest verifyRequest = (VerifyRequest) o;
    return Objects.equals(this.senderId, verifyRequest.senderId) &&
        Objects.equals(this.to, verifyRequest.to) &&
        Objects.equals(this.message, verifyRequest.message) &&
        Objects.equals(this.codeLength, verifyRequest.codeLength) &&
        Objects.equals(this.codeValidity, verifyRequest.codeValidity) &&
        Objects.equals(this.codeType, verifyRequest.codeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(senderId, to, message, codeLength, codeValidity, codeType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyRequest {\n");
    
    sb.append("    senderId: ").append(toIndentedString(senderId)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    codeLength: ").append(toIndentedString(codeLength)).append("\n");
    sb.append("    codeValidity: ").append(toIndentedString(codeValidity)).append("\n");
    sb.append("    codeType: ").append(toIndentedString(codeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
