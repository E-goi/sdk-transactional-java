/*
 * Transactional API
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.EmailReportResponse;
import io.swagger.client.model.Error401;
import io.swagger.client.model.Error403;
import io.swagger.client.model.Error500;
import io.swagger.client.model.SmsReportResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsApi {
    private ApiClient apiClient;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for produceEmailReport
     * @param group The name of the group to search (optional)
     * @param groupBy The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call produceEmailReportCall(String group, String groupBy, String dateStart, String dateEnd, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/email/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (groupBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupBy", groupBy));
        if (dateStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateStart", dateStart));
        if (dateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateEnd", dateEnd));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call produceEmailReportValidateBeforeCall(String group, String groupBy, String dateStart, String dateEnd, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = produceEmailReportCall(group, groupBy, dateStart, dateEnd, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Email Report
     * Retrieve Mail Reports and Statistics. Entries can be customizable
     * @param group The name of the group to search (optional)
     * @param groupBy The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @return List&lt;EmailReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EmailReportResponse> produceEmailReport(String group, String groupBy, String dateStart, String dateEnd) throws ApiException {
        ApiResponse<List<EmailReportResponse>> resp = produceEmailReportWithHttpInfo(group, groupBy, dateStart, dateEnd);
        return resp.getData();
    }

    /**
     * Get Email Report
     * Retrieve Mail Reports and Statistics. Entries can be customizable
     * @param group The name of the group to search (optional)
     * @param groupBy The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @return ApiResponse&lt;List&lt;EmailReportResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EmailReportResponse>> produceEmailReportWithHttpInfo(String group, String groupBy, String dateStart, String dateEnd) throws ApiException {
        com.squareup.okhttp.Call call = produceEmailReportValidateBeforeCall(group, groupBy, dateStart, dateEnd, null, null);
        Type localVarReturnType = new TypeToken<List<EmailReportResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Email Report (asynchronously)
     * Retrieve Mail Reports and Statistics. Entries can be customizable
     * @param group The name of the group to search (optional)
     * @param groupBy The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call produceEmailReportAsync(String group, String groupBy, String dateStart, String dateEnd, final ApiCallback<List<EmailReportResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = produceEmailReportValidateBeforeCall(group, groupBy, dateStart, dateEnd, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EmailReportResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for produceSmsReport
     * @param group The id of the group to search (optional)
     * @param groupBy The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call produceSmsReportCall(String group, String groupBy, String dateStart, String dateEnd, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/sms/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (groupBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupBy", groupBy));
        if (dateStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateStart", dateStart));
        if (dateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateEnd", dateEnd));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call produceSmsReportValidateBeforeCall(String group, String groupBy, String dateStart, String dateEnd, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = produceSmsReportCall(group, groupBy, dateStart, dateEnd, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Sms Report
     * Retrieve Sms Reports and Statistics. Entries can be customizable
     * @param group The id of the group to search (optional)
     * @param groupBy The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @return List&lt;SmsReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SmsReportResponse> produceSmsReport(String group, String groupBy, String dateStart, String dateEnd) throws ApiException {
        ApiResponse<List<SmsReportResponse>> resp = produceSmsReportWithHttpInfo(group, groupBy, dateStart, dateEnd);
        return resp.getData();
    }

    /**
     * Get Sms Report
     * Retrieve Sms Reports and Statistics. Entries can be customizable
     * @param group The id of the group to search (optional)
     * @param groupBy The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @return ApiResponse&lt;List&lt;SmsReportResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SmsReportResponse>> produceSmsReportWithHttpInfo(String group, String groupBy, String dateStart, String dateEnd) throws ApiException {
        com.squareup.okhttp.Call call = produceSmsReportValidateBeforeCall(group, groupBy, dateStart, dateEnd, null, null);
        Type localVarReturnType = new TypeToken<List<SmsReportResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Sms Report (asynchronously)
     * Retrieve Sms Reports and Statistics. Entries can be customizable
     * @param group The id of the group to search (optional)
     * @param groupBy The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call produceSmsReportAsync(String group, String groupBy, String dateStart, String dateEnd, final ApiCallback<List<SmsReportResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = produceSmsReportValidateBeforeCall(group, groupBy, dateStart, dateEnd, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SmsReportResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
