/*
 * Transactional API
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AlertIdResponse;
import io.swagger.client.model.AlertTemplateIdResponse;
import io.swagger.client.model.AlertTemplateRequest;
import io.swagger.client.model.AlertTemplateResponse;
import io.swagger.client.model.Body;
import io.swagger.client.model.CancelAlertRequest;
import io.swagger.client.model.Error400;
import io.swagger.client.model.Error401;
import io.swagger.client.model.Error403;
import io.swagger.client.model.Error404;
import io.swagger.client.model.Error500;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AlertsApi
 */
@Ignore
public class AlertsApiTest {

    private final AlertsApi api = new AlertsApi();

    /**
     * Change Single Alert Template
     *
     * This method will change information about the template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeAlertTemplateTest() throws ApiException {
        String id = null;
        AlertTemplateRequest body = null;
        AlertTemplateResponse response = api.changeAlertTemplate(id, body);

        // TODO: test validations
    }
    /**
     * Create Alert Template
     *
     * This method will create and add an alert template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAlertTemplateTest() throws ApiException {
        AlertTemplateRequest body = null;
        AlertTemplateIdResponse response = api.createAlertTemplate(body);

        // TODO: test validations
    }
    /**
     * Execute Alert
     *
     * This method executes an alert flow , using a pre-created alert template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeEmailAlertTest() throws ApiException {
        Body body = null;
        AlertIdResponse response = api.executeEmailAlert(body);

        // TODO: test validations
    }
    /**
     * Get Single Alert Template
     *
     * This method returns the Alert Template wih the id in the path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMultiChannelTest() throws ApiException {
        String id = null;
        AlertTemplateResponse response = api.listMultiChannel(id);

        // TODO: test validations
    }
    /**
     * Get All Alert Template
     *
     * This method returns all the Alert Templates
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMultiChannel1Test() throws ApiException {
        List<AlertTemplateResponse> response = api.listMultiChannel1();

        // TODO: test validations
    }
    /**
     * Remove Alert Template
     *
     * This method removes an Alert Template from the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeAlertTemplateTest() throws ApiException {
        String id = null;
        api.removeAlertTemplate(id);

        // TODO: test validations
    }
    /**
     * Stop Alert
     *
     * This method will stop any alerts that are being processed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopAlertTest() throws ApiException {
        CancelAlertRequest body = null;
        AlertIdResponse response = api.stopAlert(body);

        // TODO: test validations
    }
}
