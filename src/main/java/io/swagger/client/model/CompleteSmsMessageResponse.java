/*
 * Transactional API
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * CompleteSmsMessageResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-25T18:24:45.836079+01:00[Europe/Lisbon]")
public class CompleteSmsMessageResponse {
  @SerializedName("groupId")
  private Integer groupId = null;

  @SerializedName("textBody")
  private String textBody = null;

  @SerializedName("templateId")
  private Integer templateId = null;

  @SerializedName("senderId")
  private Integer senderId = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("createDate")
  private OffsetDateTime createDate = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("subscriberId")
  private Integer subscriberId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("register")
  private Boolean register = null;

  public CompleteSmsMessageResponse groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Get groupId
   * @return groupId
  **/
  @Schema(description = "")
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }

  public CompleteSmsMessageResponse textBody(String textBody) {
    this.textBody = textBody;
    return this;
  }

   /**
   * Get textBody
   * @return textBody
  **/
  @Schema(description = "")
  public String getTextBody() {
    return textBody;
  }

  public void setTextBody(String textBody) {
    this.textBody = textBody;
  }

  public CompleteSmsMessageResponse templateId(Integer templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @Schema(description = "")
  public Integer getTemplateId() {
    return templateId;
  }

  public void setTemplateId(Integer templateId) {
    this.templateId = templateId;
  }

  public CompleteSmsMessageResponse senderId(Integer senderId) {
    this.senderId = senderId;
    return this;
  }

   /**
   * Get senderId
   * @return senderId
  **/
  @Schema(description = "")
  public Integer getSenderId() {
    return senderId;
  }

  public void setSenderId(Integer senderId) {
    this.senderId = senderId;
  }

  public CompleteSmsMessageResponse id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public CompleteSmsMessageResponse createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

   /**
   * Get createDate
   * @return createDate
  **/
  @Schema(description = "")
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }

  public CompleteSmsMessageResponse status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public CompleteSmsMessageResponse subscriberId(Integer subscriberId) {
    this.subscriberId = subscriberId;
    return this;
  }

   /**
   * Get subscriberId
   * @return subscriberId
  **/
  @Schema(description = "")
  public Integer getSubscriberId() {
    return subscriberId;
  }

  public void setSubscriberId(Integer subscriberId) {
    this.subscriberId = subscriberId;
  }

  public CompleteSmsMessageResponse name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CompleteSmsMessageResponse register(Boolean register) {
    this.register = register;
    return this;
  }

   /**
   * Get register
   * @return register
  **/
  @Schema(description = "")
  public Boolean isRegister() {
    return register;
  }

  public void setRegister(Boolean register) {
    this.register = register;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompleteSmsMessageResponse completeSmsMessageResponse = (CompleteSmsMessageResponse) o;
    return Objects.equals(this.groupId, completeSmsMessageResponse.groupId) &&
        Objects.equals(this.textBody, completeSmsMessageResponse.textBody) &&
        Objects.equals(this.templateId, completeSmsMessageResponse.templateId) &&
        Objects.equals(this.senderId, completeSmsMessageResponse.senderId) &&
        Objects.equals(this.id, completeSmsMessageResponse.id) &&
        Objects.equals(this.createDate, completeSmsMessageResponse.createDate) &&
        Objects.equals(this.status, completeSmsMessageResponse.status) &&
        Objects.equals(this.subscriberId, completeSmsMessageResponse.subscriberId) &&
        Objects.equals(this.name, completeSmsMessageResponse.name) &&
        Objects.equals(this.register, completeSmsMessageResponse.register);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupId, textBody, templateId, senderId, id, createDate, status, subscriberId, name, register);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompleteSmsMessageResponse {\n");
    
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    textBody: ").append(toIndentedString(textBody)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    senderId: ").append(toIndentedString(senderId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriberId: ").append(toIndentedString(subscriberId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    register: ").append(toIndentedString(register)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
