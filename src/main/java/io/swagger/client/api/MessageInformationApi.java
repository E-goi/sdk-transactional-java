/*
 * Transactional API
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CompleteEmailMessageResponse;
import io.swagger.client.model.CompleteSmsMessageResponse;
import io.swagger.client.model.Error401;
import io.swagger.client.model.Error403;
import io.swagger.client.model.Error404;
import io.swagger.client.model.Error500;
import io.swagger.client.model.ErrorGenericResponse;
import io.swagger.client.model.PartialEmailMessageResponse;
import io.swagger.client.model.PartialSmsMessageResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageInformationApi {
    private ApiClient apiClient;

    public MessageInformationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageInformationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for listAllEmailMessages
     * @param group The name of the group to search (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param destination The mobile number of a recipient. (optional)
     * @param status The status to check the message. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAllEmailMessagesCall(String group, String dateStart, String dateEnd, String destination, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/email/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (dateStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateStart", dateStart));
        if (dateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateEnd", dateEnd));
        if (destination != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destination", destination));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAllEmailMessagesValidateBeforeCall(String group, String dateStart, String dateEnd, String destination, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listAllEmailMessagesCall(group, dateStart, dateEnd, destination, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All Email Messages
     * Retrieve the list of all sms messages. Results can be filtered by messages ids, group or channel. The result will be a combination of all parameters present
     * @param group The name of the group to search (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param destination The mobile number of a recipient. (optional)
     * @param status The status to check the message. (optional)
     * @return List&lt;PartialEmailMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PartialEmailMessageResponse> listAllEmailMessages(String group, String dateStart, String dateEnd, String destination, String status) throws ApiException {
        ApiResponse<List<PartialEmailMessageResponse>> resp = listAllEmailMessagesWithHttpInfo(group, dateStart, dateEnd, destination, status);
        return resp.getData();
    }

    /**
     * Get All Email Messages
     * Retrieve the list of all sms messages. Results can be filtered by messages ids, group or channel. The result will be a combination of all parameters present
     * @param group The name of the group to search (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param destination The mobile number of a recipient. (optional)
     * @param status The status to check the message. (optional)
     * @return ApiResponse&lt;List&lt;PartialEmailMessageResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PartialEmailMessageResponse>> listAllEmailMessagesWithHttpInfo(String group, String dateStart, String dateEnd, String destination, String status) throws ApiException {
        com.squareup.okhttp.Call call = listAllEmailMessagesValidateBeforeCall(group, dateStart, dateEnd, destination, status, null, null);
        Type localVarReturnType = new TypeToken<List<PartialEmailMessageResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Email Messages (asynchronously)
     * Retrieve the list of all sms messages. Results can be filtered by messages ids, group or channel. The result will be a combination of all parameters present
     * @param group The name of the group to search (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param destination The mobile number of a recipient. (optional)
     * @param status The status to check the message. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAllEmailMessagesAsync(String group, String dateStart, String dateEnd, String destination, String status, final ApiCallback<List<PartialEmailMessageResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAllEmailMessagesValidateBeforeCall(group, dateStart, dateEnd, destination, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PartialEmailMessageResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAllSmsMessages
     * @param group The name of the group to search (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param destination The mobile number of a recipient. (optional)
     * @param status The status to check the message. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAllSmsMessagesCall(String group, String dateStart, String dateEnd, String destination, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/sms/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (dateStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateStart", dateStart));
        if (dateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateEnd", dateEnd));
        if (destination != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destination", destination));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAllSmsMessagesValidateBeforeCall(String group, String dateStart, String dateEnd, String destination, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listAllSmsMessagesCall(group, dateStart, dateEnd, destination, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All Sms Messages
     * Retrieve the list of all sms messages. Results can be filtered by messages ids, group or channel. The result will be a combination of all parameters present
     * @param group The name of the group to search (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param destination The mobile number of a recipient. (optional)
     * @param status The status to check the message. (optional)
     * @return List&lt;PartialSmsMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PartialSmsMessageResponse> listAllSmsMessages(String group, String dateStart, String dateEnd, String destination, String status) throws ApiException {
        ApiResponse<List<PartialSmsMessageResponse>> resp = listAllSmsMessagesWithHttpInfo(group, dateStart, dateEnd, destination, status);
        return resp.getData();
    }

    /**
     * Get All Sms Messages
     * Retrieve the list of all sms messages. Results can be filtered by messages ids, group or channel. The result will be a combination of all parameters present
     * @param group The name of the group to search (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param destination The mobile number of a recipient. (optional)
     * @param status The status to check the message. (optional)
     * @return ApiResponse&lt;List&lt;PartialSmsMessageResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PartialSmsMessageResponse>> listAllSmsMessagesWithHttpInfo(String group, String dateStart, String dateEnd, String destination, String status) throws ApiException {
        com.squareup.okhttp.Call call = listAllSmsMessagesValidateBeforeCall(group, dateStart, dateEnd, destination, status, null, null);
        Type localVarReturnType = new TypeToken<List<PartialSmsMessageResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Sms Messages (asynchronously)
     * Retrieve the list of all sms messages. Results can be filtered by messages ids, group or channel. The result will be a combination of all parameters present
     * @param group The name of the group to search (optional)
     * @param dateStart The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param dateEnd The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)
     * @param destination The mobile number of a recipient. (optional)
     * @param status The status to check the message. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAllSmsMessagesAsync(String group, String dateStart, String dateEnd, String destination, String status, final ApiCallback<List<PartialSmsMessageResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAllSmsMessagesValidateBeforeCall(group, dateStart, dateEnd, destination, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PartialSmsMessageResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSingleEmailMessage
     * @param id The id of the message. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSingleEmailMessageCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/email/messages/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSingleEmailMessageValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listSingleEmailMessage(Async)");
        }
        
        com.squareup.okhttp.Call call = listSingleEmailMessageCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Single Email Messages
     * Retrieve the message with the id from path
     * @param id The id of the message. (required)
     * @return CompleteEmailMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompleteEmailMessageResponse listSingleEmailMessage(Integer id) throws ApiException {
        ApiResponse<CompleteEmailMessageResponse> resp = listSingleEmailMessageWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Single Email Messages
     * Retrieve the message with the id from path
     * @param id The id of the message. (required)
     * @return ApiResponse&lt;CompleteEmailMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompleteEmailMessageResponse> listSingleEmailMessageWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = listSingleEmailMessageValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CompleteEmailMessageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Single Email Messages (asynchronously)
     * Retrieve the message with the id from path
     * @param id The id of the message. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSingleEmailMessageAsync(Integer id, final ApiCallback<CompleteEmailMessageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSingleEmailMessageValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompleteEmailMessageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSingleSmsMessage
     * @param id The id of the message. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSingleSmsMessageCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/sms/messages/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSingleSmsMessageValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listSingleSmsMessage(Async)");
        }
        
        com.squareup.okhttp.Call call = listSingleSmsMessageCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Single Sms Messages
     * Retrieve the message with the id from path
     * @param id The id of the message. (required)
     * @return CompleteSmsMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompleteSmsMessageResponse listSingleSmsMessage(Integer id) throws ApiException {
        ApiResponse<CompleteSmsMessageResponse> resp = listSingleSmsMessageWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Single Sms Messages
     * Retrieve the message with the id from path
     * @param id The id of the message. (required)
     * @return ApiResponse&lt;CompleteSmsMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompleteSmsMessageResponse> listSingleSmsMessageWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = listSingleSmsMessageValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CompleteSmsMessageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Single Sms Messages (asynchronously)
     * Retrieve the message with the id from path
     * @param id The id of the message. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSingleSmsMessageAsync(Integer id, final ApiCallback<CompleteSmsMessageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSingleSmsMessageValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompleteSmsMessageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
