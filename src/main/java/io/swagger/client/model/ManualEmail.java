/*
 * Transactional API
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AttachmentRequest;
import io.swagger.client.model.HeaderOptionsRequest;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ManualEmail
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-25T18:20:46.782806+01:00[Europe/Lisbon]")
public class ManualEmail {
  @SerializedName("domain")
  private String domain = null;

  @SerializedName("senderId")
  private String senderId = null;

  @SerializedName("senderName")
  private String senderName = null;

  @SerializedName("to")
  private List<String> to = new ArrayList<String>();

  @SerializedName("cc")
  private List<String> cc = null;

  @SerializedName("bcc")
  private List<String> bcc = null;

  @SerializedName("replyToId")
  private String replyToId = null;

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("htmlBody")
  private String htmlBody = null;

  @SerializedName("textBody")
  private String textBody = null;

  @SerializedName("openTracking")
  private Boolean openTracking = false;

  @SerializedName("clickTracking")
  private Boolean clickTracking = false;

  @SerializedName("attachment")
  private List<AttachmentRequest> attachment = null;

  @SerializedName("mergeTags")
  private List<String> mergeTags = null;

  @SerializedName("customData")
  private String customData = null;

  /**
   * The priority of the message.
   */
  @JsonAdapter(PriorityEnum.Adapter.class)
  public enum PriorityEnum {
    URGENT("urgent"),
    NON_URGENT("non-urgent");

    private String value;

    PriorityEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PriorityEnum fromValue(String text) {
      for (PriorityEnum b : PriorityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PriorityEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("priority")
  private PriorityEnum priority = PriorityEnum.NON_URGENT;

  @SerializedName("registered")
  private Boolean registered = false;

  @SerializedName("header")
  private HeaderOptionsRequest header = null;

  @SerializedName("group")
  private String group = "default";

  public ManualEmail domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * the Domain to de used in the sender email.
   * @return domain
  **/
  @Schema(example = "e-goi.com", description = "the Domain to de used in the sender email.")
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }

  public ManualEmail senderId(String senderId) {
    this.senderId = senderId;
    return this;
  }

   /**
   * The code identification of the sender profile to be used.
   * @return senderId
  **/
  @Schema(example = "1234", required = true, description = "The code identification of the sender profile to be used.")
  public String getSenderId() {
    return senderId;
  }

  public void setSenderId(String senderId) {
    this.senderId = senderId;
  }

  public ManualEmail senderName(String senderName) {
    this.senderName = senderName;
    return this;
  }

   /**
   * The name to be associated with the Domain to form the email.
   * @return senderName
  **/
  @Schema(example = "Customer Support", description = "The name to be associated with the Domain to form the email.")
  public String getSenderName() {
    return senderName;
  }

  public void setSenderName(String senderName) {
    this.senderName = senderName;
  }

  public ManualEmail to(List<String> to) {
    this.to = to;
    return this;
  }

  public ManualEmail addToItem(String toItem) {
    this.to.add(toItem);
    return this;
  }

   /**
   * The To field in the email.
   * @return to
  **/
  @Schema(required = true, description = "The To field in the email.")
  public List<String> getTo() {
    return to;
  }

  public void setTo(List<String> to) {
    this.to = to;
  }

  public ManualEmail cc(List<String> cc) {
    this.cc = cc;
    return this;
  }

  public ManualEmail addCcItem(String ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<String>();
    }
    this.cc.add(ccItem);
    return this;
  }

   /**
   * The Cc field in the email.
   * @return cc
  **/
  @Schema(description = "The Cc field in the email.")
  public List<String> getCc() {
    return cc;
  }

  public void setCc(List<String> cc) {
    this.cc = cc;
  }

  public ManualEmail bcc(List<String> bcc) {
    this.bcc = bcc;
    return this;
  }

  public ManualEmail addBccItem(String bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<String>();
    }
    this.bcc.add(bccItem);
    return this;
  }

   /**
   * The Bcc field in the email.
   * @return bcc
  **/
  @Schema(description = "The Bcc field in the email.")
  public List<String> getBcc() {
    return bcc;
  }

  public void setBcc(List<String> bcc) {
    this.bcc = bcc;
  }

  public ManualEmail replyToId(String replyToId) {
    this.replyToId = replyToId;
    return this;
  }

   /**
   * The email id for if/when the recipient responds to the email.
   * @return replyToId
  **/
  @Schema(example = "1234", description = "The email id for if/when the recipient responds to the email.")
  public String getReplyToId() {
    return replyToId;
  }

  public void setReplyToId(String replyToId) {
    this.replyToId = replyToId;
  }

  public ManualEmail subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The subject of the message.
   * @return subject
  **/
  @Schema(example = "Welcome to the Club", required = true, description = "The subject of the message.")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public ManualEmail htmlBody(String htmlBody) {
    this.htmlBody = htmlBody;
    return this;
  }

   /**
   * The html version of the body of the message.
   * @return htmlBody
  **/
  @Schema(example = "Hello %name%! <b>Welcome!</b> ", description = "The html version of the body of the message.")
  public String getHtmlBody() {
    return htmlBody;
  }

  public void setHtmlBody(String htmlBody) {
    this.htmlBody = htmlBody;
  }

  public ManualEmail textBody(String textBody) {
    this.textBody = textBody;
    return this;
  }

   /**
   * The text version of the body of the message.
   * @return textBody
  **/
  @Schema(example = "Hello %name%! Welcome! ", description = "The text version of the body of the message.")
  public String getTextBody() {
    return textBody;
  }

  public void setTextBody(String textBody) {
    this.textBody = textBody;
  }

  public ManualEmail openTracking(Boolean openTracking) {
    this.openTracking = openTracking;
    return this;
  }

   /**
   * The option to track if the message is opened.
   * @return openTracking
  **/
  @Schema(description = "The option to track if the message is opened.")
  public Boolean isOpenTracking() {
    return openTracking;
  }

  public void setOpenTracking(Boolean openTracking) {
    this.openTracking = openTracking;
  }

  public ManualEmail clickTracking(Boolean clickTracking) {
    this.clickTracking = clickTracking;
    return this;
  }

   /**
   * The option to track if the message is clicked.
   * @return clickTracking
  **/
  @Schema(description = "The option to track if the message is clicked.")
  public Boolean isClickTracking() {
    return clickTracking;
  }

  public void setClickTracking(Boolean clickTracking) {
    this.clickTracking = clickTracking;
  }

  public ManualEmail attachment(List<AttachmentRequest> attachment) {
    this.attachment = attachment;
    return this;
  }

  public ManualEmail addAttachmentItem(AttachmentRequest attachmentItem) {
    if (this.attachment == null) {
      this.attachment = new ArrayList<AttachmentRequest>();
    }
    this.attachment.add(attachmentItem);
    return this;
  }

   /**
   * A list of files to be attached to the emails
   * @return attachment
  **/
  @Schema(description = "A list of files to be attached to the emails")
  public List<AttachmentRequest> getAttachment() {
    return attachment;
  }

  public void setAttachment(List<AttachmentRequest> attachment) {
    this.attachment = attachment;
  }

  public ManualEmail mergeTags(List<String> mergeTags) {
    this.mergeTags = mergeTags;
    return this;
  }

  public ManualEmail addMergeTagsItem(String mergeTagsItem) {
    if (this.mergeTags == null) {
      this.mergeTags = new ArrayList<String>();
    }
    this.mergeTags.add(mergeTagsItem);
    return this;
  }

   /**
   * A list of the merge tags to replace information gaps in the email. The format of each tag should be &#x60;&#x60;tagName:tagValue&#x60;&#x60;
   * @return mergeTags
  **/
  @Schema(description = "A list of the merge tags to replace information gaps in the email. The format of each tag should be ``tagName:tagValue``")
  public List<String> getMergeTags() {
    return mergeTags;
  }

  public void setMergeTags(List<String> mergeTags) {
    this.mergeTags = mergeTags;
  }

  public ManualEmail customData(String customData) {
    this.customData = customData;
    return this;
  }

   /**
   * Extra Data related to the campaign to be re-sent via WebHook.
   * @return customData
  **/
  @Schema(example = "meta-data, my relevant metadata", description = "Extra Data related to the campaign to be re-sent via WebHook.")
  public String getCustomData() {
    return customData;
  }

  public void setCustomData(String customData) {
    this.customData = customData;
  }

  public ManualEmail priority(PriorityEnum priority) {
    this.priority = priority;
    return this;
  }

   /**
   * The priority of the message.
   * @return priority
  **/
  @Schema(description = "The priority of the message.")
  public PriorityEnum getPriority() {
    return priority;
  }

  public void setPriority(PriorityEnum priority) {
    this.priority = priority;
  }

  public ManualEmail registered(Boolean registered) {
    this.registered = registered;
    return this;
  }

   /**
   * option to register the message. Its an exclusive feature for senders that require it.
   * @return registered
  **/
  @Schema(example = "false", description = "option to register the message. Its an exclusive feature for senders that require it.")
  public Boolean isRegistered() {
    return registered;
  }

  public void setRegistered(Boolean registered) {
    this.registered = registered;
  }

  public ManualEmail header(HeaderOptionsRequest header) {
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @Schema(description = "")
  public HeaderOptionsRequest getHeader() {
    return header;
  }

  public void setHeader(HeaderOptionsRequest header) {
    this.header = header;
  }

  public ManualEmail group(String group) {
    this.group = group;
    return this;
  }

   /**
   * The group of the message.
   * @return group
  **/
  @Schema(example = "welcome", description = "The group of the message.")
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManualEmail manualEmail = (ManualEmail) o;
    return Objects.equals(this.domain, manualEmail.domain) &&
        Objects.equals(this.senderId, manualEmail.senderId) &&
        Objects.equals(this.senderName, manualEmail.senderName) &&
        Objects.equals(this.to, manualEmail.to) &&
        Objects.equals(this.cc, manualEmail.cc) &&
        Objects.equals(this.bcc, manualEmail.bcc) &&
        Objects.equals(this.replyToId, manualEmail.replyToId) &&
        Objects.equals(this.subject, manualEmail.subject) &&
        Objects.equals(this.htmlBody, manualEmail.htmlBody) &&
        Objects.equals(this.textBody, manualEmail.textBody) &&
        Objects.equals(this.openTracking, manualEmail.openTracking) &&
        Objects.equals(this.clickTracking, manualEmail.clickTracking) &&
        Objects.equals(this.attachment, manualEmail.attachment) &&
        Objects.equals(this.mergeTags, manualEmail.mergeTags) &&
        Objects.equals(this.customData, manualEmail.customData) &&
        Objects.equals(this.priority, manualEmail.priority) &&
        Objects.equals(this.registered, manualEmail.registered) &&
        Objects.equals(this.header, manualEmail.header) &&
        Objects.equals(this.group, manualEmail.group);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, senderId, senderName, to, cc, bcc, replyToId, subject, htmlBody, textBody, openTracking, clickTracking, attachment, mergeTags, customData, priority, registered, header, group);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManualEmail {\n");
    
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    senderId: ").append(toIndentedString(senderId)).append("\n");
    sb.append("    senderName: ").append(toIndentedString(senderName)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    replyToId: ").append(toIndentedString(replyToId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    htmlBody: ").append(toIndentedString(htmlBody)).append("\n");
    sb.append("    textBody: ").append(toIndentedString(textBody)).append("\n");
    sb.append("    openTracking: ").append(toIndentedString(openTracking)).append("\n");
    sb.append("    clickTracking: ").append(toIndentedString(clickTracking)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    mergeTags: ").append(toIndentedString(mergeTags)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    registered: ").append(toIndentedString(registered)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
