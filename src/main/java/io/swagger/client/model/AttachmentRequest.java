/*
 * Transactional API
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The attachment to be attached in the email.
 */
@Schema(description = "The attachment to be attached in the email.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-25T18:24:45.836079+01:00[Europe/Lisbon]")
public class AttachmentRequest {
  @SerializedName("filename")
  private String filename = null;

  @SerializedName("data")
  private String data = null;

  @SerializedName("mimeType")
  private String mimeType = null;

  /**
   * Arrangement for the Attachment inside the email. Can be either: \&quot;inline\&quot; (appears inside the email message body) or \&quot;attachment\&quot; (appears as an enclosed file).
   */
  @JsonAdapter(ArrangementEnum.Adapter.class)
  public enum ArrangementEnum {
    ATTACHMENT("attachment"),
    INLINE("inline");

    private String value;

    ArrangementEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ArrangementEnum fromValue(String text) {
      for (ArrangementEnum b : ArrangementEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ArrangementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArrangementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArrangementEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ArrangementEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("arrangement")
  private ArrangementEnum arrangement = ArrangementEnum.ATTACHMENT;

  public AttachmentRequest filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * the filename of the file to go in the email.
   * @return filename
  **/
  @Schema(example = "document_final", required = true, description = "the filename of the file to go in the email.")
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }

  public AttachmentRequest data(String data) {
    this.data = data;
    return this;
  }

   /**
   * the base64 stream of information that comprises the file.
   * @return data
  **/
  @Schema(example = "wolQTkcNChoKAAAADUlIRFIAAABIAAAASAgGAAAAVcOtwrNHA", required = true, description = "the base64 stream of information that comprises the file.")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public AttachmentRequest mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

   /**
   * the format to buuild the file for the recipient.
   * @return mimeType
  **/
  @Schema(example = "application/pdf", required = true, description = "the format to buuild the file for the recipient.")
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }

  public AttachmentRequest arrangement(ArrangementEnum arrangement) {
    this.arrangement = arrangement;
    return this;
  }

   /**
   * Arrangement for the Attachment inside the email. Can be either: \&quot;inline\&quot; (appears inside the email message body) or \&quot;attachment\&quot; (appears as an enclosed file).
   * @return arrangement
  **/
  @Schema(example = "attachment", required = true, description = "Arrangement for the Attachment inside the email. Can be either: \"inline\" (appears inside the email message body) or \"attachment\" (appears as an enclosed file).")
  public ArrangementEnum getArrangement() {
    return arrangement;
  }

  public void setArrangement(ArrangementEnum arrangement) {
    this.arrangement = arrangement;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachmentRequest attachmentRequest = (AttachmentRequest) o;
    return Objects.equals(this.filename, attachmentRequest.filename) &&
        Objects.equals(this.data, attachmentRequest.data) &&
        Objects.equals(this.mimeType, attachmentRequest.mimeType) &&
        Objects.equals(this.arrangement, attachmentRequest.arrangement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filename, data, mimeType, arrangement);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentRequest {\n");
    
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    arrangement: ").append(toIndentedString(arrangement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
